#!/usr/bin/env bash
#
# Script name: dm-music
# Description: Play music using mpd and mpc.
# Dependencies: dmenu, fzf, rofi, mpd, mpc, wildmidi, timidity++
# GitLab: https://www.gitlab.com/dwt1/dmscripts
# License: https://www.gitlab.com/dwt1/dmscripts/LICENSE
# Contributors: Murtaza Udaipurwala
#               Derek Taylor
#
### HELP FOR MPD CONFIG
# Sample mpd config to be placed in $HOME/.config/mpd/mpd.conf
# music_directory		"~/music"
# playlist_directory	"~/.local/share/mpd/playlists" # This directory needs to be created manually
# auto_update "yes"
# bind_to_address "127.0.0.1"
# restore_paused "yes"
# max_output_buffer_size "16384
#
# audio_output {
# 	type "pulse"
# 	name "pulse"
# }
#
# audio_output {
#        type	"fifo"
#        name	"Visualizer feed"
#        path	"/tmp/mpd.fifo"
#        format	"44100:16:2"
# }

# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

# shellcheck disable=SC1091
source ./_dm-helper.sh 2>/dev/null || source _dm-helper.sh 2>/dev/null

source_dmscripts_configs

if configs_are_different; then
    echo "$(date): configs are different" >>"$DM_CONFIG_DIFF_LOGFILE"
    sleep 1
fi

play() {
    mpc crop >/dev/null 2>&1
    music="$(mpc listall | ${MENU} "Music to play")" || exit 1
    mpc -q add "$music"
    mpc del 0 >/dev/null 2>&1
    mpc play
    mpc repeat on
}

queue_playlist() {
    playlist="$(mpc lsplaylists | ${MENU} "Your playlists")" || exit 1
    mpc -q clear
    mpc load "$playlist"
    mpc -q play 1
    echo "$playlist" >"${HOME}/.cache/current_playlist"
}

current_playlist() {
    playlist="$(cat "${HOME}/.cache/current_playlist")"
    music_list="$(mpc playlist "${playlist}")"
    music="$(echo "${music_list}" | ${MENU} "Music to play")" || exit 1
    mpc -q clear
    mpc load "${playlist}" >/dev/null 2>&1
    mpc play "$(echo "${music_list}" | awk -v pattern="$music" '$0 ~ pattern { print NR; exit }')"
}

main() {
    declare -a choices=(
        "Play"
        "Toggle"
        "Current Playlist"
        "Queue Playlist"
    )

    choice=$(printf '%s\n' "${choices[@]}" | ${MENU} 'Music Player:' "$@") || exit 1

    case $choice in
    Play)
        play
        ;;

    Toggle)
        mpc toggle
        ;;

    Current\ Playlist)
        current_playlist
        ;;

    Queue\ Playlist)
        queue_playlist
        ;;
    *)
        exit
        ;;
    esac

}

# We write a unique help function for dm-music since it has
# more options than the typical dmscript.
help() {
    printf '%s' "Usage: $(basename "$0") [options]
$(grep '^# Description: ' "$0" | sed 's/# Description: /Description: /g')
$(grep '^# Dependencies: ' "$0" | sed 's/# Dependencies: /Dependencies: /g')

The folowing OPTIONS are accepted:
    -h  displays this help page
    -d  runs the script using 'dmenu'
    -f  runs the script using 'fzf'
    -r  runs the script using 'rofi'

Some useful mpc commands:
    mpc toggle\t\t\ttoggle between pause and play state
    mpc next\t\t\tgo to next track
    mpc prev\t\t\tgo to prev track
    mpc seekthrough +00:00:10\tseek 10s forward
    mpc seekthrough -00:00:10\tseek 10s backward

Running" " $(basename "$0") " "without any argument defaults to using 'dmenu'
Run 'man dmscripts' for more information"

}

no_opt=1
# If script is run with '-d', it will use 'dmenu'
# If script is run with '-f', it will use 'fzf'
# If script is run with '-d', it will use 'rofi'
while getopts "dfrh" arg 2>/dev/null; do
    case "${arg}" in
    d) # shellcheck disable=SC2153
        MENU=${DMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main
        ;;
    f) # shellcheck disable=SC2153
        MENU=${FMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main
        ;;
    r) # shellcheck disable=SC2153
        MENU=${RMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main
        ;;
    h) help ;;
    *) printf '%s\n' "Error: invalid option" "Type $(basename "$0") -h for help" ;;
    esac
    no_opt=0
done

# If script is run with NO argument, it will use 'dmenu'
[ $no_opt = 1 ] && MENU=${DMENU} && [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
